// Code generated by protoc-gen-go.
// source: myrpc.proto
// DO NOT EDIT!

/*
Package myrpc is a generated protocol buffer package.

It is generated from these files:
	myrpc.proto

It has these top-level messages:
	CreatePersonRequest
	CreatePersonResponse
*/
package myrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type CreatePersonRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age  int32  `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
}

func (m *CreatePersonRequest) Reset()                    { *m = CreatePersonRequest{} }
func (m *CreatePersonRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePersonRequest) ProtoMessage()               {}
func (*CreatePersonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreatePersonResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreatePersonResponse) Reset()                    { *m = CreatePersonResponse{} }
func (m *CreatePersonResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatePersonResponse) ProtoMessage()               {}
func (*CreatePersonResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*CreatePersonRequest)(nil), "myrpc.CreatePersonRequest")
	proto.RegisterType((*CreatePersonResponse)(nil), "myrpc.CreatePersonResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for People service

type PeopleClient interface {
	CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonResponse, error)
}

type peopleClient struct {
	cc *grpc.ClientConn
}

func NewPeopleClient(cc *grpc.ClientConn) PeopleClient {
	return &peopleClient{cc}
}

func (c *peopleClient) CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonResponse, error) {
	out := new(CreatePersonResponse)
	err := grpc.Invoke(ctx, "/myrpc.People/CreatePerson", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for People service

type PeopleServer interface {
	CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonResponse, error)
}

func RegisterPeopleServer(s *grpc.Server, srv PeopleServer) {
	s.RegisterService(&_People_serviceDesc, srv)
}

func _People_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PeopleServer).CreatePerson(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _People_serviceDesc = grpc.ServiceDesc{
	ServiceName: "myrpc.People",
	HandlerType: (*PeopleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerson",
			Handler:    _People_CreatePerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xad, 0x2c, 0x2a,
	0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0xa4, 0x64, 0xd2, 0xf3, 0xf3,
	0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32,
	0xf3, 0xf3, 0x8a, 0x21, 0x8a, 0x94, 0xac, 0xb9, 0x84, 0x9d, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0x03,
	0x52, 0x8b, 0x8a, 0xf3, 0xf3, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58,
	0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x01, 0x2e,
	0xe6, 0xc4, 0xf4, 0x54, 0x09, 0x26, 0xa0, 0x10, 0x6b, 0x10, 0x88, 0xa9, 0xa4, 0xc7, 0x25, 0x82,
	0xaa, 0xb9, 0xb8, 0x00, 0x68, 0x72, 0xaa, 0x90, 0x18, 0x17, 0x5b, 0x51, 0x6a, 0x71, 0x69, 0x4e,
	0x09, 0x54, 0x3f, 0x94, 0x67, 0x94, 0xc3, 0xc5, 0x16, 0x90, 0x9a, 0x5f, 0x90, 0x93, 0x2a, 0x94,
	0xc4, 0xc5, 0x83, 0xac, 0x53, 0x48, 0x4a, 0x0f, 0xe2, 0x72, 0x2c, 0x6e, 0x91, 0x92, 0xc6, 0x2a,
	0x07, 0xb1, 0x4a, 0x49, 0xb2, 0xe9, 0xf2, 0x93, 0xc9, 0x4c, 0xc2, 0x4a, 0x7c, 0x60, 0xff, 0x95,
	0x19, 0xea, 0x17, 0x80, 0x2d, 0xb0, 0x62, 0xd4, 0x4a, 0x62, 0x03, 0xfb, 0xd0, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0xcd, 0xfe, 0x8d, 0xec, 0x15, 0x01, 0x00, 0x00,
}
